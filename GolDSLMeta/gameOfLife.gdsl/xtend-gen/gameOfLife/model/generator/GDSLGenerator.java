/**
 * generated by Xtext 2.37.0
 */
package gameOfLife.model.generator;

import com.google.common.collect.Iterables;
import gameOfLife.model.gameOfLife.Cell;
import gameOfLife.model.gameOfLife.Model;
import gameOfLife.model.gameOfLife.Rule;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

@SuppressWarnings("all")
public class GDSLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Consumer<Model> _function = (Model model) -> {
      fsa.generateFile("RulesOfLife.java", this.generateRulesOfLife(model));
    };
    Iterables.<Model>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Model.class).forEach(_function);
  }

  public CharSequence generateRulesOfLife(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package org.example;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.HashSet;");
    _builder.newLine();
    _builder.append("import java.util.Set;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class RulesOfLife {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Set<Cell> aliveCells = new HashSet<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public RulesOfLife() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("initializeGrid();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private void initializeGrid() {");
    _builder.newLine();
    {
      EList<Cell> _cells = model.getCells();
      for(final Cell cell : _cells) {
        _builder.append("        ");
        _builder.append("aliveCells.add(new Cell(");
        int _x = cell.getX();
        _builder.append(_x, "        ");
        _builder.append(", ");
        int _y = cell.getY();
        _builder.append(_y, "        ");
        _builder.append("));");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void nextGeneration() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Set<Cell> newAliveCells = new HashSet<>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Set<Cell> potentialCells = new HashSet<>(aliveCells);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (Cell cell : aliveCells) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("potentialCells.addAll(cell.getNeighbors());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (Cell cell : potentialCells) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("int liveNeighbors = countLiveNeighbors(cell);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (isAlive(cell)) {");
    _builder.newLine();
    {
      EList<Rule> _rules = model.getRules();
      for(final Rule rule : _rules) {
        _builder.append("                ");
        _builder.append("if (liveNeighbors ");
        String _operator = rule.getCondition().getOperator();
        _builder.append(_operator, "                ");
        _builder.append(" ");
        int _value = rule.getCondition().getValue();
        _builder.append(_value, "                ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("                ");
        _builder.append("    ");
        _builder.append("if (\"die\".equals(\"");
        String _action = rule.getAction();
        _builder.append(_action, "                    ");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("                ");
        _builder.append("        ");
        _builder.append("// Cell dies");
        _builder.newLine();
        _builder.append("                ");
        _builder.append("    ");
        _builder.append("} else if (\"live\".equals(\"");
        String _action_1 = rule.getAction();
        _builder.append(_action_1, "                    ");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("                ");
        _builder.append("        ");
        _builder.append("newAliveCells.add(cell);");
        _builder.newLine();
        _builder.append("                ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("                ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    {
      EList<Rule> _rules_1 = model.getRules();
      for(final Rule rule_1 : _rules_1) {
        _builder.append("                ");
        _builder.append("if (liveNeighbors ");
        String _operator_1 = rule_1.getCondition().getOperator();
        _builder.append(_operator_1, "                ");
        _builder.append(" ");
        int _value_1 = rule_1.getCondition().getValue();
        _builder.append(_value_1, "                ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("                ");
        _builder.append("    ");
        _builder.append("if (\"becomeAlive\".equals(\"");
        String _action_2 = rule_1.getAction();
        _builder.append(_action_2, "                    ");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("                ");
        _builder.append("        ");
        _builder.append("newAliveCells.add(cell);");
        _builder.newLine();
        _builder.append("                ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("                ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("aliveCells = newAliveCells;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private int countLiveNeighbors(Cell cell) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int count = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (Cell neighbor : cell.getNeighbors()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (isAlive(neighbor)) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("count++;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return count;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private boolean isAlive(Cell cell) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return aliveCells.contains(cell);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static class Cell {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private final int x;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private final int y;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Cell(int x, int y) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("this.x = x;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("this.y = y;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Set<Cell> getNeighbors() {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Set<Cell> neighbors = new HashSet<>();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (int dx = -1; dx <= 1; dx++) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for (int dy = -1; dy <= 1; dy++) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (dx != 0 || dy != 0) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("neighbors.add(new Cell(x + dx, y + dy));");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return neighbors;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public boolean equals(Object o) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (this == o) return true;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (o == null || getClass() != o.getClass()) return false;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Cell cell = (Cell) o;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return x == cell.x && y == cell.y;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public int hashCode() {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return Objects.hash(x, y);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
