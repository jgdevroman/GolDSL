/*
 * generated by Xtext 2.37.0
 */
package gameOfLife.model.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameOfLife.model.GDSL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGridKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCellsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCellsCellParserRuleCall_2_0 = (RuleCall)cCellsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRulesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRulesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRulesRuleParserRuleCall_6_0 = (RuleCall)cRulesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Model:
		//    'Grid' '{'
		//        cells+=Cell*
		//    '}'
		//    'Rules' '{'
		//        rules+=Rule*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Grid' '{'
		//    cells+=Cell*
		//'}'
		//'Rules' '{'
		//    rules+=Rule*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Grid'
		public Keyword getGridKeyword_0() { return cGridKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//cells+=Cell*
		public Assignment getCellsAssignment_2() { return cCellsAssignment_2; }
		
		//Cell
		public RuleCall getCellsCellParserRuleCall_2_0() { return cCellsCellParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//'Rules'
		public Keyword getRulesKeyword_4() { return cRulesKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//rules+=Rule*
		public Assignment getRulesAssignment_6() { return cRulesAssignment_6; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_6_0() { return cRulesRuleParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class CellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameOfLife.model.GDSL.Cell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCellKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXINTTerminalRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYINTTerminalRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cStateKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStateAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStateCellStateEnumRuleCall_8_0 = (RuleCall)cStateAssignment_8.eContents().get(0);
		
		//Cell:
		//    'Cell' '(' x=INT ',' y=INT ')' 'state' '=' state=CellState;
		@Override public ParserRule getRule() { return rule; }
		
		//'Cell' '(' x=INT ',' y=INT ')' 'state' '=' state=CellState
		public Group getGroup() { return cGroup; }
		
		//'Cell'
		public Keyword getCellKeyword_0() { return cCellKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//x=INT
		public Assignment getXAssignment_2() { return cXAssignment_2; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_2_0() { return cXINTTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//y=INT
		public Assignment getYAssignment_4() { return cYAssignment_4; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_4_0() { return cYINTTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'state'
		public Keyword getStateKeyword_6() { return cStateKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//state=CellState
		public Assignment getStateAssignment_8() { return cStateAssignment_8; }
		
		//CellState
		public RuleCall getStateCellStateEnumRuleCall_8_0() { return cStateCellStateEnumRuleCall_8_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameOfLife.model.GDSL.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cConditionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cActionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionActionParserRuleCall_5_0 = (RuleCall)cActionAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Rule:
		//    'Rule' '{'
		//        'condition' condition=Condition
		//        'action' action=Action
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Rule' '{'
		//    'condition' condition=Condition
		//    'action' action=Action
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'condition'
		public Keyword getConditionKeyword_2() { return cConditionKeyword_2; }
		
		//condition=Condition
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0() { return cConditionConditionParserRuleCall_3_0; }
		
		//'action'
		public Keyword getActionKeyword_4() { return cActionKeyword_4; }
		
		//action=Action
		public Assignment getActionAssignment_5() { return cActionAssignment_5; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_5_0() { return cActionActionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameOfLife.model.GDSL.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNeighborsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Condition:
		//    'neighbors' operator=Operator value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'neighbors' operator=Operator value=INT
		public Group getGroup() { return cGroup; }
		
		//'neighbors'
		public Keyword getNeighborsKeyword_0() { return cNeighborsKeyword_0; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_1_0() { return cOperatorOperatorParserRuleCall_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameOfLife.model.GDSL.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Operator:
		//    '<' | '=' | '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' | '=' | '>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameOfLife.model.GDSL.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDieKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLiveKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBecomeAliveKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Action:
		//    'die' | 'live' | 'becomeAlive';
		@Override public ParserRule getRule() { return rule; }
		
		//'die' | 'live' | 'becomeAlive'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'die'
		public Keyword getDieKeyword_0() { return cDieKeyword_0; }
		
		//'live'
		public Keyword getLiveKeyword_1() { return cLiveKeyword_1; }
		
		//'becomeAlive'
		public Keyword getBecomeAliveKeyword_2() { return cBecomeAliveKeyword_2; }
	}
	
	public class CellStateElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "gameOfLife.model.GDSL.CellState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cALIVEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cALIVEALIVEKeyword_0_0 = (Keyword)cALIVEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDEADEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDEADDEADKeyword_1_0 = (Keyword)cDEADEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CellState:
		//    ALIVE | DEAD;
		public EnumRule getRule() { return rule; }
		
		//ALIVE | DEAD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ALIVE
		public EnumLiteralDeclaration getALIVEEnumLiteralDeclaration_0() { return cALIVEEnumLiteralDeclaration_0; }
		
		public Keyword getALIVEALIVEKeyword_0_0() { return cALIVEALIVEKeyword_0_0; }
		
		//DEAD
		public EnumLiteralDeclaration getDEADEnumLiteralDeclaration_1() { return cDEADEnumLiteralDeclaration_1; }
		
		public Keyword getDEADDEADKeyword_1_0() { return cDEADDEADKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final CellElements pCell;
	private final CellStateElements eCellState;
	private final RuleElements pRule;
	private final ConditionElements pCondition;
	private final OperatorElements pOperator;
	private final ActionElements pAction;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pCell = new CellElements();
		this.eCellState = new CellStateElements();
		this.pRule = new RuleElements();
		this.pCondition = new ConditionElements();
		this.pOperator = new OperatorElements();
		this.pAction = new ActionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("gameOfLife.model.GDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    'Grid' '{'
	//        cells+=Cell*
	//    '}'
	//    'Rules' '{'
	//        rules+=Rule*
	//    '}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Cell:
	//    'Cell' '(' x=INT ',' y=INT ')' 'state' '=' state=CellState;
	public CellElements getCellAccess() {
		return pCell;
	}
	
	public ParserRule getCellRule() {
		return getCellAccess().getRule();
	}
	
	//enum CellState:
	//    ALIVE | DEAD;
	public CellStateElements getCellStateAccess() {
		return eCellState;
	}
	
	public EnumRule getCellStateRule() {
		return getCellStateAccess().getRule();
	}
	
	//Rule:
	//    'Rule' '{'
	//        'condition' condition=Condition
	//        'action' action=Action
	//    '}';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Condition:
	//    'neighbors' operator=Operator value=INT;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Operator:
	//    '<' | '=' | '>';
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Action:
	//    'die' | 'live' | 'becomeAlive';
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
