/*
 * generated by Xtext 2.37.0
 */
package gameOfLife.model.validation

import org.eclipse.xtext.validation.Check
import gameOfLife.model.gDSL.Grid
import gameOfLife.model.gDSL.Rule
import java.util.HashSet
import java.util.AbstractMap.SimpleEntry
import gameOfLife.model.gDSL.GDSLPackage.Literals


class GDSLValidator extends AbstractGDSLValidator {
	
    @Check
	def checkNeighborCondition(Rule rule) {
	    if (rule.condition.value < 0 || rule.condition.value > 8) {
	        error(
	            "Neighbor count must be between 0 and 8.",
	            rule.condition,
	            null
	        )
	    }
	}
    
    @Check
    def checkNoDuplicateCoordinates(Grid grid) {
        val seenCoordinates = new HashSet<SimpleEntry<Integer, Integer>>()

        grid.ranges.forEach[range |
            val coordinate = new SimpleEntry(range.start, range.end)
            if (!seenCoordinates.add(coordinate)) {
                error(
                    "Duplicate coordinate (" + range.start + ", " + range.end + ") found in the grid.",
                    range,
                    null
                )
            }
        ]
    }
    
    @Check
	def checkGridWithinBoundaries(Grid grid) {
		var ranges  = grid.ranges;
		if (ranges !== null) {
			for (var i = 0; i < ranges.size; i++) {
				if (ranges.get(i).getStart() < 0 ) {
					error("Start range is out of bounds. Enter a valuer greater than 0.", Literals.RANGE__START)
				}
				if (ranges.get(i).getEnd() > 52 ) {
					error("Start range is out of bounds. Enter a value smaller than 53", null)
				}
			}
		}
	}
}
